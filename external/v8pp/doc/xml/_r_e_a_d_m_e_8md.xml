<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">[![Travis<sp/>Build<sp/>status](https://travis-ci.org/pmed/v8pp.svg)](https://travis-ci.org/pmed/v8pp)</highlight></codeline>
<codeline><highlight class="normal">[![AppVeyor<sp/>build<sp/>status](https://ci.appveyor.com/api/projects/status/github/pmed/v8pp?svg=true)](https://ci.appveyor.com/project/pmed/v8pp)</highlight></codeline>
<codeline><highlight class="normal">[![NPM](https://img.shields.io/npm/v/v8pp.svg)](https://npmjs.com/package/v8pp)</highlight></codeline>
<codeline><highlight class="normal">[![Join<sp/>the<sp/>chat<sp/>at<sp/>https://gitter.im/pmed/v8pp](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pmed/v8pp?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>v8pp</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Header-only<sp/>library<sp/>to<sp/>expose<sp/>C++<sp/>classes<sp/>and<sp/>functions<sp/>into<sp/>[V8](https://developers.google.com/v8/)<sp/>to<sp/>use<sp/>them<sp/>in<sp/>JavaScript<sp/>code.<sp/>v8pp<sp/>uses<sp/>heavy<sp/>template<sp/>metaprogramming<sp/>and<sp/>variadic<sp/>template<sp/>parameters<sp/>which<sp/>requires<sp/>modern<sp/>compiler<sp/>with<sp/>C++11<sp/>support.<sp/>The<sp/>library<sp/>has<sp/>been<sp/>tested<sp/>on:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Microsoft<sp/>Visual<sp/>C++<sp/>2015/2017<sp/>(Windows<sp/>10)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>GCC<sp/>5.4.0<sp/>(Ubuntu<sp/>16.04)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Clang<sp/>5.0.0<sp/>(Ubuntu<sp/>16.04)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Binding<sp/>example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">v8pp<sp/>supports<sp/>V8<sp/>versions<sp/>after<sp/>6.3<sp/>with<sp/>`v8::Isolate`<sp/>usage<sp/>in<sp/>API.<sp/>There<sp/>are<sp/>2<sp/>targets<sp/>for<sp/>binding:</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`v8pp::module`,<sp/>a<sp/>wrapper<sp/>class<sp/>around<sp/>`v8::ObjectTemplate`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`v8pp::class_`,<sp/>a<sp/>template<sp/>class<sp/>wrapper<sp/>around<sp/>`v8::FunctionTemplate`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Both<sp/>of<sp/>them<sp/>require<sp/>a<sp/>pointer<sp/>to<sp/>`v8::Isolate`<sp/>instance.<sp/>They<sp/>allows<sp/>to<sp/>bind<sp/>from<sp/>C++<sp/>code<sp/>such<sp/>items<sp/>as<sp/>variables,<sp/>functions,<sp/>constants<sp/>with<sp/>a<sp/>function<sp/>`set(name,<sp/>item)`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">v8::Isolate*<sp/>isolate;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>var;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>get_var()<sp/>{<sp/>return<sp/>var<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>set_var(int<sp/>x)<sp/>{<sp/>var<sp/>=<sp/>x<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">struct<sp/>X</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>X(int<sp/>v,<sp/>bool<sp/>u)<sp/>:<sp/>var(v)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>var;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>get()<sp/>const<sp/>{<sp/>return<sp/>var;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>voi<sp/>set(int<sp/>x)<sp/>{<sp/>var<sp/>=<sp/>x;<sp/>}<sp/></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>bind<sp/>free<sp/>variables<sp/>and<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">v8pp::module<sp/>mylib(isolate);</highlight></codeline>
<codeline><highlight class="normal">mylib</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>set<sp/>read-only<sp/>attribute</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.set_const(&quot;PI&quot;,<sp/>3.1415)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>set<sp/>variable<sp/>available<sp/>in<sp/>JavaScript<sp/>with<sp/>name<sp/>`var`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.set(&quot;var&quot;,<sp/>var)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>set<sp/>function<sp/>get_var<sp/>as<sp/>`fun`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.set(&quot;fun&quot;,<sp/>&amp;get_var)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>set<sp/>property<sp/>`prop`<sp/>with<sp/>getter<sp/>get_var()<sp/>and<sp/>setter<sp/>set_var()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.set(&quot;prop&quot;,<sp/>property(get_var,<sp/>set_var));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>bind<sp/>class</highlight></codeline>
<codeline><highlight class="normal">v8pp::class_&lt;X&gt;<sp/>X_class(isolate);</highlight></codeline>
<codeline><highlight class="normal">X_class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>specify<sp/>X<sp/>constructor<sp/>signature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.ctor&lt;int,<sp/>bool&gt;()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>bind<sp/>variable</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.set(&quot;var&quot;,<sp/>&amp;X::var)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>bind<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.set(&quot;fun&quot;,<sp/>&amp;X::set)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>bind<sp/>read-only<sp/>property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.set(&quot;prop&quot;,<sp/>property(&amp;X::get));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>set<sp/>class<sp/>into<sp/>the<sp/>module<sp/>template</highlight></codeline>
<codeline><highlight class="normal">mylib.set(&quot;X&quot;,<sp/>X_class);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>set<sp/>bindings<sp/>in<sp/>global<sp/>object<sp/>as<sp/>`mylib`</highlight></codeline>
<codeline><highlight class="normal">isolate-&gt;GetCurrentContext()-&gt;Global()-&gt;Set(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8::String::NewFromUtf8(isolate,<sp/>&quot;mylib&quot;),<sp/>mylib.new_instance());</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">After<sp/>that<sp/>bindings<sp/>will<sp/>be<sp/>available<sp/>in<sp/>JavaScript:</highlight></codeline>
<codeline><highlight class="normal">```javascript</highlight></codeline>
<codeline><highlight class="normal">mylib.var<sp/>=<sp/>mylib.PI<sp/>+<sp/>mylib.fun();</highlight></codeline>
<codeline><highlight class="normal">var<sp/>x<sp/>=<sp/>new<sp/>mylib.X(1,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">mylib.prop<sp/>=<sp/>x.prop<sp/>+<sp/>x.fun();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Node.js<sp/>and<sp/>io.js<sp/>addons</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>library<sp/>is<sp/>suitable<sp/>to<sp/>make<sp/>[Node.js](http://nodejs.org/)<sp/>and<sp/>[io.js](https://iojs.org/)<sp/>addons.<sp/>See<sp/>[addons](docs/addons.md)<sp/>document.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>RegisterModule(v8::Handle&lt;v8::Object&gt;<sp/>exports)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8pp::module<sp/>addon(v8::Isolate::GetCurrent());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>set<sp/>bindings...<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addon</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;fun&quot;,<sp/>&amp;function)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;cls&quot;,<sp/>my_class)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>set<sp/>bindings<sp/>as<sp/>exports<sp/>object<sp/>prototype</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>exports-&gt;SetPrototype(addon.new_instance());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>v8pp<sp/>also<sp/>provides</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`v8pp`<sp/>-<sp/>a<sp/>static<sp/>library<sp/>to<sp/>add<sp/>several<sp/>global<sp/>functions<sp/>(load/require<sp/>to<sp/>the<sp/>v8<sp/>JavaScript<sp/>context.<sp/>`require()`<sp/>is<sp/>a<sp/>system<sp/>for<sp/>loading<sp/>plugins<sp/>from<sp/>shared<sp/>libraries.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`test`<sp/>-<sp/>A<sp/>binary<sp/>for<sp/>running<sp/>JavaScript<sp/>files<sp/>in<sp/>a<sp/>context<sp/>which<sp/>has<sp/>v8pp<sp/>module<sp/>loading<sp/>functions<sp/>provided.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>v8pp<sp/>module<sp/>example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;v8pp/module.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>console<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>log(v8::FunctionCallbackInfo&lt;v8::Value&gt;<sp/>const&amp;<sp/>args)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>handle_scope(args.GetIsolate());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>args.Length();<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>&gt;<sp/>0)<sp/>std::cout<sp/>&lt;&lt;<sp/>&apos;<sp/>&apos;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::String::Utf8Value<sp/>str(args[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><sp/>*str;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>init(v8::Isolate*<sp/>isolate)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8pp::module<sp/>m(isolate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>m.set(&quot;log&quot;,<sp/>&amp;log);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>m.new_instance();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//<sp/>namespace<sp/>console</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Turning<sp/>a<sp/>v8pp<sp/>module<sp/>into<sp/>a<sp/>v8pp<sp/>plugin</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">V8PP_PLUGIN_INIT(v8::Isolate*<sp/>isolate)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>console::init(isolate);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>v8pp<sp/>class<sp/>binding<sp/>example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;v8pp/module.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;v8pp/class.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;fstream&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>file<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>rename(char<sp/>const*<sp/>src,<sp/>char<sp/>const*<sp/>dest)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::rename(src,<sp/>dest)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>file_base</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>is_open()<sp/>const<sp/>{<sp/>return<sp/>stream_.is_open();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>good()<sp/>const<sp/>{<sp/>return<sp/>stream_.good();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>eof()<sp/>const<sp/>{<sp/>return<sp/>stream_.eof();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>close()<sp/>{<sp/>stream_.close();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::fstream<sp/>stream_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>file_writer<sp/>:<sp/>public<sp/>file_base</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>file_writer(v8::FunctionCallbackInfo&lt;v8::Value&gt;<sp/>const&amp;<sp/>args)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(args.Length()<sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::String::Utf8Value<sp/>str(args[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open(*str);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>open(char<sp/>const*<sp/>path)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_.open(path,<sp/>std::ios_base::out);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>stream_.good();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>print(v8::FunctionCallbackInfo&lt;v8::Value&gt;<sp/>const&amp;<sp/>args)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(args.GetIsolate());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>args.Length();<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>&gt;<sp/>0)<sp/>stream_<sp/>&lt;&lt;<sp/>&apos;<sp/>&apos;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::String::Utf8Value<sp/>str(args[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_<sp/>&lt;&lt;<sp/>*str;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>println(v8::FunctionCallbackInfo&lt;v8::Value&gt;<sp/>const&amp;<sp/>args)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>file_reader<sp/>:<sp/>public<sp/>file_base</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>file_reader(char<sp/>const*<sp/>path)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open(path);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>open(const<sp/>char*<sp/>path)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_.open(path,<sp/>std::ios_base::in);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>stream_.good();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Handle&lt;v8::Value&gt;<sp/>getline(v8::Isolate*<sp/>isolate)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>stream_.good()<sp/>&amp;&amp;<sp/>!<sp/>stream_.eof())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(stream_,<sp/>line);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v8pp::to_v8(isolate,<sp/>line);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v8::Undefined(isolate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>init(v8::Isolate*<sp/>isolate)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8::EscapableHandleScope<sp/>scope(isolate);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>file_base<sp/>binding,<sp/>no<sp/>.ctor()<sp/>specified,<sp/>object<sp/>creation<sp/>disallowed<sp/>in<sp/>JavaScript</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8pp::class_&lt;file_base&gt;<sp/>file_base_class(isolate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_base_class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;close&quot;,<sp/>&amp;file_base::close)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;good&quot;,<sp/>&amp;file_base::good)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;is_open&quot;,<sp/>&amp;file_base::is_open)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;eof&quot;,<sp/>&amp;file_base::eof)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>.ctor&lt;&gt;<sp/>template<sp/>arguments<sp/>declares<sp/>types<sp/>of<sp/>file_writer<sp/>constructor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>file_writer<sp/>inherits<sp/>from<sp/>file_base_class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8pp::class_&lt;file_writer&gt;<sp/>file_writer_class(isolate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_writer_class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ctor&lt;v8::FunctionCallbackInfo&lt;v8::Value&gt;<sp/>const&amp;&gt;()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.inherit&lt;file_base&gt;()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;open&quot;,<sp/>&amp;file_writer::open)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;print&quot;,<sp/>&amp;file_writer::print)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;println&quot;,<sp/>&amp;file_writer::println)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>.ctor&lt;&gt;<sp/>template<sp/>arguments<sp/>declares<sp/>types<sp/>of<sp/>file_reader<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>file_base<sp/>inherits<sp/>from<sp/>file_base_class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8pp::class_&lt;file_reader&gt;<sp/>file_reader_class(isolate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_reader_class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ctor&lt;char<sp/>const*&gt;()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.inherit&lt;file_base&gt;()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;open&quot;,<sp/>&amp;file_reader::open)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.set(&quot;getln&quot;,<sp/>&amp;file_reader::getline)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>module<sp/>to<sp/>add<sp/>classes<sp/>and<sp/>functions<sp/>to<sp/>and<sp/>return<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>new<sp/>instance<sp/>of<sp/>the<sp/>module<sp/>to<sp/>be<sp/>embedded<sp/>into<sp/>the<sp/>v8<sp/>context</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v8pp::module<sp/>m(isolate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>m.set(&quot;rename&quot;,<sp/>&amp;rename)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.set(&quot;writer&quot;,<sp/>file_writer_class)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.set(&quot;reader&quot;,<sp/>file_reader_class)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>scope.Escape(m.new_instance());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//<sp/>namespace<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">V8PP_PLUGIN_INIT(v8::Isolate*<sp/>isolate)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>file::init(isolate);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Creating<sp/>a<sp/>v8<sp/>context<sp/>capable<sp/>of<sp/>using<sp/>require()<sp/>function</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;v8pp/context.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">v8pp::context<sp/>context;</highlight></codeline>
<codeline><highlight class="normal">context.set_lib_path(&quot;path/to/plugins/lib&quot;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>script<sp/>can<sp/>now<sp/>use<sp/>require()<sp/>function.<sp/>An<sp/>application</highlight></codeline>
<codeline><highlight class="normal">//<sp/>that<sp/>uses<sp/>v8pp::context<sp/>must<sp/>link<sp/>against<sp/>v8pp<sp/>library.</highlight></codeline>
<codeline><highlight class="normal">v8::HandleScope<sp/>scope(context.isolate());</highlight></codeline>
<codeline><highlight class="normal">context.run_file(&quot;some_file.js&quot;);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Using<sp/>require()<sp/>from<sp/>JavaScript</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```javascript</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Load<sp/>the<sp/>file<sp/>module<sp/>from<sp/>the<sp/>class<sp/>binding<sp/>example<sp/>and<sp/>the</highlight></codeline>
<codeline><highlight class="normal">//<sp/>console<sp/>module.</highlight></codeline>
<codeline><highlight class="normal">var<sp/>file<sp/><sp/><sp/><sp/>=<sp/>require(&apos;file&apos;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console<sp/>=<sp/>require(&apos;console&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>writer<sp/>=<sp/>new<sp/>file.writer(&quot;file&quot;)</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(writer.is_open())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.println(&quot;some<sp/>text&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.close()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>file.rename(&quot;file&quot;,<sp/>&quot;newfile&quot;))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;could<sp/>not<sp/>rename<sp/>file&quot;)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else<sp/>console.log(&quot;could<sp/>not<sp/>open<sp/>`file&apos;&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">console.log(&quot;exit&quot;)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Create<sp/>a<sp/>handle<sp/>to<sp/>an<sp/>externally<sp/>referenced<sp/>C++<sp/>class.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Memory<sp/>for<sp/>C++<sp/>class<sp/>will<sp/>remain<sp/>when<sp/>JavaScript<sp/>object<sp/>is<sp/>deleted.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Useful<sp/>for<sp/>classes<sp/>you<sp/>only<sp/>wish<sp/>to<sp/>inject.</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>v8pp::class_&lt;my_class&gt;<sp/>my_class_wrapper(isolate);</highlight></codeline>
<codeline><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>val<sp/>=<sp/>my_class_wrapper::reference_external(&amp;my_class::instance());</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Assuming<sp/>my_class::instance()<sp/>returns<sp/>reference<sp/>to<sp/>class</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Import<sp/>externally<sp/>created<sp/>C++<sp/>class<sp/>into<sp/>v8pp.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Memory<sp/>for<sp/>c++<sp/>object<sp/>will<sp/>be<sp/>reclaimed<sp/>by<sp/>JavaScript<sp/>using<sp/>&quot;delete&quot;<sp/>when</highlight></codeline>
<codeline><highlight class="normal">//<sp/>JavaScript<sp/>class<sp/>is<sp/>deleted.</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>v8pp::class_&lt;my_class&gt;<sp/>my_class_wrapper(isolate);</highlight></codeline>
<codeline><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>val<sp/>=<sp/>my_class_wrapper::import_external(new<sp/>my_class);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Compile-time<sp/>configuration</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>library<sp/>uses<sp/>several<sp/>preprocessor<sp/>macros,<sp/>defined<sp/>in<sp/>`v8pp/config.hpp`<sp/>file:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`V8PP_ISOLATE_DATA_SLOT`<sp/>-<sp/>A<sp/>v8::Isolate<sp/>data<sp/>slot<sp/>number,<sp/>used<sp/>to<sp/>store<sp/>v8pp<sp/>internal<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`V8PP_PLUGIN_INIT_PROC_NAME`<sp/>-<sp/>Plugin<sp/>initialization<sp/>procedure<sp/>name<sp/>that<sp/>should<sp/>be<sp/>exported<sp/>from<sp/>a<sp/>v8pp<sp/>plugin.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`V8PP_PLUGIN_SUFFIX`<sp/>-<sp/>Plugin<sp/>filename<sp/>suffix<sp/>that<sp/>would<sp/>be<sp/>added<sp/>if<sp/>the<sp/>plugin<sp/>name<sp/>used<sp/>in<sp/>`require()`<sp/>doesn&apos;t<sp/>end<sp/>with<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`V8PP_HEADER_ONLY`<sp/>-<sp/>Use<sp/>header-only<sp/>implemenation,<sp/>enabled<sp/>by<sp/>default.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>v8pp<sp/>alternatives</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>[nbind](https://github.com/charto/nbind)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[vu8](https://github.com/tsa/vu8),<sp/>abandoned</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[v8-juice](http://code.google.com/p/v8-juice/),<sp/>abandoned</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Script<sp/>bindng<sp/>in<sp/>[cpgf](https://github.com/cpgf/cpgf)</highlight></codeline>
    </programlisting>
    <location file="README.md"/>
  </compounddef>
</doxygen>
