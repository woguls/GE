<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b" kind="struct" language="C++" prot="public">
    <compoundname>v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1a09e74f36e06e4093bd85dffb8b010222" prot="public" static="no">
        <type>T *</type>
        <definition>using v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;::from_type =  T*</definition>
        <argsstring></argsstring>
        <name>from_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="v8pp/convert.hpp" line="504" column="1" bodyfile="v8pp/convert.hpp" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1a9cc695efc8d28366ab63b87fe5d67747" prot="public" static="no">
        <type>v8::Local&lt; v8::Object &gt;</type>
        <definition>using v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;::to_type =  v8::Local&lt;v8::Object&gt;</definition>
        <argsstring></argsstring>
        <name>to_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="v8pp/convert.hpp" line="505" column="1" bodyfile="v8pp/convert.hpp" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1a6f558b87c4fbe99c3f32f6cb2555aa9d" prot="public" static="no">
        <type>typename std::remove_cv&lt; T &gt;::type</type>
        <definition>using v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;::class_type =  typename std::remove_cv&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>class_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="v8pp/convert.hpp" line="506" column="1" bodyfile="v8pp/convert.hpp" bodystart="506" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1afc0c2441f61866c15acfdf0b89cb2201" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;::is_valid</definition>
        <argsstring>(v8::Isolate *, v8::Local&lt; v8::Value &gt; value)</argsstring>
        <name>is_valid</name>
        <param>
          <type>v8::Isolate *</type>
        </param>
        <param>
          <type>v8::Local&lt; v8::Value &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="v8pp/convert.hpp" line="508" column="1" bodyfile="v8pp/convert.hpp" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1ae1bad775e330f22723741699d5ae41aa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>from_type</type>
        <definition>static from_type v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;::from_v8</definition>
        <argsstring>(v8::Isolate *isolate, v8::Local&lt; v8::Value &gt; value)</argsstring>
        <name>from_v8</name>
        <param>
          <type>v8::Isolate *</type>
          <declname>isolate</declname>
        </param>
        <param>
          <type>v8::Local&lt; v8::Value &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="v8pp/convert.hpp" line="513" column="1" bodyfile="v8pp/convert.hpp" bodystart="513" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1a9af6926f9a8c4732276856312f4e01e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>to_type</type>
        <definition>static to_type v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;::to_v8</definition>
        <argsstring>(v8::Isolate *isolate, T const *value)</argsstring>
        <name>to_v8</name>
        <param>
          <type>v8::Isolate *</type>
          <declname>isolate</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="v8pp/convert.hpp" line="522" column="1" bodyfile="v8pp/convert.hpp" bodystart="522" bodyend="525"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="v8pp/convert.hpp" line="503" column="1" bodyfile="v8pp/convert.hpp" bodystart="502" bodyend="526"/>
    <listofallmembers>
      <member refid="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1a6f558b87c4fbe99c3f32f6cb2555aa9d" prot="public" virt="non-virtual"><scope>v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;</scope><name>class_type</name></member>
      <member refid="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1a09e74f36e06e4093bd85dffb8b010222" prot="public" virt="non-virtual"><scope>v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;</scope><name>from_type</name></member>
      <member refid="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1ae1bad775e330f22723741699d5ae41aa" prot="public" virt="non-virtual"><scope>v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;</scope><name>from_v8</name></member>
      <member refid="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1afc0c2441f61866c15acfdf0b89cb2201" prot="public" virt="non-virtual"><scope>v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;</scope><name>is_valid</name></member>
      <member refid="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1a9cc695efc8d28366ab63b87fe5d67747" prot="public" virt="non-virtual"><scope>v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;</scope><name>to_type</name></member>
      <member refid="structv8pp_1_1convert_3_01_t_01_5_00_01typename_01std_1_1enable__if_3_01is__wrapped__class_3_01_25915118c627362f414694ff4e5e030b_1a9af6926f9a8c4732276856312f4e01e9" prot="public" virt="non-virtual"><scope>v8pp::convert&lt; T *, typename std::enable_if&lt; is_wrapped_class&lt; T &gt;::value &gt;::type &gt;</scope><name>to_v8</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
